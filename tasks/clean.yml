---
- name: Get current version
  become: true
  shell: |
    . {{ nvm_script }}
    nvm ls current --no-colors
  register: res_curr
  failed_when: false
  when: true

- name: Get currently installed list of versions
  become: true
  shell: |
    . {{ nvm_script }}
    nvm ls {{ nvm.type }} --no-colors
  register: res_vers
  failed_when: false
  when: res_curr.rc < 1

- name: Variables
  set_fact:
    versions: []
    curr_ver: "{{ res_curr.stdout | replace('->', '') | replace('N/A', '') | replace('v', '') | replace('*', '') | replace(' ', '') }}"

- name: Append versions
  set_fact:
    versions: "{{ versions + [ item | replace('->', '') | replace(' ', '') | replace('none', '') | replace('*', '') ] }}"
  with_items: "{{ res_vers.stdout_lines }}"
  when: res_vers is defined and res_vers.stdout_lines is defined

# - name: Remove current version from version list
#   set_fact:
#     versions: "{{ versions | union([curr_ver, 'v'+curr_ver]) | difference([curr_ver, 'v'+curr_ver]) }}"

- name: Set the node version to system
  shell: |
    . {{ nvm_script }}
    nvm alias default system
  become: true
  when: true

- name: Remove old version(s)
  become: true
  shell: |
    . {{ nvm_script }}
    nvm uninstall {{ item }}
  failed_when: false
  with_items: "{{ versions }}"
  when: true

- name: Unlink the executable files for all users
  file:
    dest: "/usr/local/bin/{{ item }}"
    state: absent
    force: true
  with_items: "{{ apt_pkgs }}"
  become: true
  when: ((['configure', 'upgrade'] | intersect(flags)) | length > 0)
